{"version":3,"sources":["utils/actions.js","utils/reducers.js","utils/GlobalState.js","assets/spinner.gif","components/PropertyWidget/index.js","utils/queries.js","pages/Home.js","components/Jumbotron/index.js","pages/NoMatch.js","utils/mutations.js","utils/auth.js","pages/Login.js","pages/Profile.js","pages/PropertyDetail.js","pages/AddProperty.js","pages/Register.js","components/Nav/index.js","App.js","serviceWorker.js","index.js"],"names":["UPDATE_PROPERTIES","reducer","state","action","type","properties","StoreContext","createContext","Provider","StoreProvider","value","initialState","props","useReducer","dispatch","useStoreContext","useContext","PropertyWidget","currentCategory","className","length","map","property","_id","image","address","forSale","QUERY_PROPERTY","gql","QUERY_PROPERTIES","QUERY_USER","Home","useQuery","loading","data","useEffect","Jumbotron","children","style","height","clear","paddingTop","textAlign","NoMatch","role","LOGIN","ADD_PROPERTY","ADD_USER","decode","this","getToken","token","isTokenExpired","exp","Date","now","err","localStorage","getItem","idToken","setItem","window","location","assign","removeItem","Login","useState","email","password","formState","setFormState","useMutation","login","error","handleFormSubmit","event","preventDefault","variables","mutationResponse","Auth","console","log","handleChange","target","name","to","onSubmit","htmlFor","placeholder","id","onChange","Profile","loggedIn","useParams","setImage","file","setFile","submitImg","formData","FormData","append","axios","post","headers","result","filename","method","accept","e","files","src","PropertyDetail","autoComplete","handleScriptLoad","updateQuery","autoCompleteRef","google","maps","places","Autocomplete","current","types","componentRestrictions","fields","setFields","addListener","handlePlaceSelect","addressObject","getPlace","query","formatted_address","AddProperty","navigate","useNavigate","addProperty","setQuery","useRef","city","zip","description","imgURL","url","callback","script","document","createElement","readyState","onreadystatechange","onload","getElementsByTagName","appendChild","loadScript","user","place","addr1","st","address_components","component","componentType","long_name","short_name","ref","size","Register","addUser","Nav","href","onClick","logout","httpLink","createHttpLink","uri","authLink","setContext","_","authorization","client","ApolloClient","link","concat","cache","InMemoryCache","App","ApolloProvider","path","element","isLocalhost","Boolean","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","controller","onUpdate","onSuccess","catch","ReactDOM","render","StrictMode","getElementById","URL","process","origin","addEventListener","fetch","response","contentType","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker"],"mappings":"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","file":"static/js/main.8f78b64a.chunk.js","sourcesContent":["\n\nexport const UPDATE_PROPERTIES = \"UPDATE_PROPERTIES\";\nexport const ADD_PROPERTY = \"ADD_PROPERTY\";\n// set some actions here\n\n","import { useReducer } from 'react';\nimport {\n    UPDATE_PROPERTIES\n} from './actions';\n\n// The reducer is a function that accepts the current state and an action. It returns a new state based on that action.\nexport const reducer = (state, action) => {\n  switch (action.type) {\n    // Returns a copy of state with an update products array. We use the action.products property and spread it's contents into the new array.\n  \n      case UPDATE_PROPERTIES:\n        return {\n          ...state,\n          properties: [...action.properties],\n        };\n\n  \n  \n    // Return the state as is in the event that the `action.type` passed to our reducer was not accounted for by the developers\n    // This saves us from a crash.\n    default:\n      return state;\n  }\n};\n\nexport function usePropertyReducer(initialState) {\n  return useReducer(reducer, initialState);\n}\n","import React, { createContext, useContext } from \"react\";\nimport { usePropertyReducer } from './reducers'\n\nconst StoreContext = createContext();\nconst { Provider } = StoreContext;\n\nconst StoreProvider = ({ value = [], ...props }) => {\n  const [state, dispatch] = usePropertyReducer({\n    properties:[],\n   \n  });\n\n  return <Provider value={[state, dispatch]} {...props} />;\n};\n\nconst useStoreContext = () => {\n  return useContext(StoreContext);\n};\n\nexport { StoreProvider, useStoreContext };\n","export default __webpack_public_path__ + \"static/media/spinner.7e729fec.gif\";","import React, { useEffect } from 'react';\n\nimport { useStoreContext } from '../../utils/GlobalState';\nimport spinner from '../../assets/spinner.gif';\n\nfunction PropertyWidget() {\n    const [state, dispatch] = useStoreContext();\n    const { currentCategory } = state;\n\n   \n\n      function filterProperties() {\n        //future function to filter based on conditions... forSale, NoNFT, etc...\n        if (true) {\n          return state.properties;\n        }\n      }\n\n        return (\n            <div className=\"my-2\">\n              <h2>House List:</h2>\n              {state.properties.length ? (\n                <div className=\"flex-row\">\n                  {filterProperties().map((property) => (\n                    <li key={property._id}>\n                      _id={property._id}\n                      images={property.image}\n                      address={property.address}\n                      value={property.value}\n                      price={property.forSale}\n                      \n                    </li>\n                  ))}\n                </div>\n              ) : (\n                <h3>No Properties</h3>\n              )}\n             \n            </div>\n          );\n\n}\n\nexport default PropertyWidget;","import { gql } from '@apollo/client';\n\n\nexport const QUERY_PROPERTY = gql`\n  query getProperty($id: ID!) {\n    property(_id: $id) {\n      _id\n      address\n      address2\n      city\n      state\n      country\n      zip\n      value\n      lat\n      lng\n      description\n      images\n      forSale\n      salePrice\n    }\n  }\n`;\n\nexport const QUERY_PROPERTIES = gql`\n  query getProperties {\n  properties {\n    _id\n    address\n    address2\n    city\n    state\n    country\n    zip\n    value\n    lat\n    lng\n    description\n    images\n    forSale\n    salePrice\n  }\n}\n`;\n\nexport const QUERY_SALE_PROPERTIES = gql`\n  query getSaleProperties {\n  properties(forSale: true) {\n    _id\n    address\n    address2\n    city\n    state\n    country\n    zip\n    value\n    lat\n    lng\n    description\n    images\n    forSale\n    salePrice\n  }\n}\n`;\n\n\nexport const QUERY_USER = gql`\n  query User {\n  user {\n    _id\n    name\n    email\n    properties {\n      _id\n      address\n      address2\n      city\n      state\n      country\n      zip\n      value\n      lat\n      lng\n      description\n      images\n      forSale\n      salePrice\n    }\n  }\n}\n`;\n","import React, { useEffect }  from \"react\";\nimport PropertyWidget from \"../components/PropertyWidget\";\nimport { useStoreContext } from '../utils/GlobalState';\nimport { useQuery } from '@apollo/client';\nimport { UPDATE_PROPERTIES } from '../utils/actions';\nimport { QUERY_PROPERTIES } from '../utils/queries';\n//import spinner from '../../assets/spinner.gif';\nconst Home = () => {\n  const [state, dispatch] = useStoreContext();\n  const { currentCategory } = state;\n  const { loading, data } = useQuery(QUERY_PROPERTIES);\n\n  \n  useEffect(() => {\n    if (data) {\n      dispatch({\n        type: UPDATE_PROPERTIES,\n        properties: data.properties,\n      });\n      \n    } else if (!loading) {\n      \n    }\n  }, [data, loading, dispatch]);\n\n\n\n  return (\n    <div className=\"container\">\n      \n      <PropertyWidget />\n     {/*} <Map />*/}\n    </div>\n  );\n};\n\nexport default Home;\n","import React from \"react\";\n\nfunction Jumbotron({ children }) {\n  return (\n    <div\n      style={{ height: 560, clear: \"both\", paddingTop: 120, textAlign: \"center\" }}\n    >\n      {children}\n    </div>\n  );\n}\n\nexport default Jumbotron;\n","import React from \"react\";\nimport Jumbotron from \"../components/Jumbotron\";\n\nconst NoMatch = () => {\n  return (\n    <div>\n      <Jumbotron>\n        <h1>404 Page Not Found</h1>\n        <h1>\n          <span role=\"img\" aria-label=\"Face With Rolling Eyes Emoji\">\n            🙄\n          </span>\n        </h1>\n      </Jumbotron>\n    </div>\n  );\n};\n\nexport default NoMatch;\n","import { gql } from '@apollo/client';\n\nexport const LOGIN = gql`\n  mutation login($email: String!, $password: String!) {\n    login(email: $email, password: $password) {\n      token\n      user {\n        _id\n      }\n    }\n  }\n`;\n\nexport const ADD_PROPERTY = gql`\n  mutation addProperty($address: String, $city: String, $state: String, $zip: String) {\n    addProperty(address: $address, city: $city, state: $state, zip: $zip) {\n      _id\n      address\n      address2\n      city\n      state\n      country\n      zip\n      value\n      description\n      images\n      forSale\n      salePrice\n    }\n  }\n`;\n\nexport const ADD_USER = gql`\n  mutation addUser($name: String!, $email: String!, $password: String!) {\n    addUser(name: $name, email: $email, password: $password) {\n      token\n      user {\n        _id\n        name\n        email\n        properties {\n          _id\n          address\n        }\n      }\n    }\n  }\n`;\n","import decode from 'jwt-decode';\n\nclass AuthService {\n  getProfile() {\n    return decode(this.getToken());\n  }\n\n  loggedIn() {\n    // Checks if there is a saved token and it's still valid\n    const token = this.getToken();\n    return !!token && !this.isTokenExpired(token);\n  }\n\n  isTokenExpired(token) {\n    try {\n      const decoded = decode(token);\n      if (decoded.exp < Date.now() / 1000) {\n        return true;\n      } else return false;\n    } catch (err) {\n      return false;\n    }\n  }\n\n  getToken() {\n    // Retrieves the user token from localStorage\n    return localStorage.getItem('id_token');\n  }\n\n  login(idToken) {\n    // Saves user token to localStorage\n    localStorage.setItem('id_token', idToken);\n\n    window.location.assign('/');\n  }\n\n  logout() {\n    // Clear user token and profile data from localStorage\n    localStorage.removeItem('id_token');\n    // this will reload the page and reset the state of the application\n    window.location.assign('/');\n  }\n}\n\nexport default new AuthService();\n","import React, { useState } from 'react';\nimport { useMutation } from '@apollo/client';\nimport { Link } from 'react-router-dom';\nimport { LOGIN } from '../utils/mutations';\nimport Auth from '../utils/auth';\n\nfunction Login(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [login, { error }] = useMutation(LOGIN);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    try {\n      const mutationResponse = await login({\n        variables: { email: formState.email, password: formState.password },\n      });\n      const token = mutationResponse.data.login.token;\n      Auth.login(token);\n    } catch (e) {\n      console.log(e);\n    }\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/signup\">← Go to Signup</Link>\n\n      <h2>Login</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email address:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        {error ? (\n          <div>\n            <p className=\"error-text\">The provided credentials are incorrect</p>\n          </div>\n        ) : null}\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Login;\n","import React from 'react';\nimport { Link } from 'react-router-dom';\nimport Auth from '../utils/auth';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\n\n\nfunction Profile(){\n    return (\n        Auth.loggedIn() ? (\n        <>\n          <div className=\"container my-1\">\n            <Link to=\"/\">← Back to Home</Link>\n            <Link to=\"/add-property\">Add Property</Link>\n          </div>\n        </>) : null )\n            \n}\n\nexport default Profile;","import React, {useEffect, useState} from 'react';\nimport { Link, useParams } from 'react-router-dom';\nimport Auth from '../utils/auth';\nimport { useQuery } from '@apollo/client';\nimport { QUERY_USER, QUERY_PROPERTY } from '../utils/queries';\nimport { useStoreContext } from '../utils/GlobalState';\nimport axios from 'axios';\n\nasync function PropertyDetail(){\n \n\n    const { id } = useParams();\n    const { loading, data } = useQuery(QUERY_PROPERTY, {\n      variables: {id: id}\n    });\n    // get the property details from the DB!\n  //  const property = data.property;\n  //  const needsImg = (property.images.length === 0) ? false : true;\n  \n  const property = data?.property || {};\n  console.log(property);\n   // console.log(\"NeedsImg:\" + needsImg);\n    // Property Detail States:\n    // Logged In\n    // (Owner) - Needs Image\n    // (Owner) - Needs NFT\n    // (Owner) - List For Sale\n    // (Owner) - Cancel Sale\n    // (Visitor) - View Propety Detail\n    // (Logged In Non-Owner) - If listed - buy\n    // \n\n    // (Owner) - Needs Image\n    // all image upload functions\n    const [image, setImage] = useState(null);\n    const [file, setFile] = useState();\n\n    // submitImg image function \n    const submitImg = async event => {\n        event.preventDefault()\n        const formData = new FormData()\n        formData.append(\"image\", file)\n        formData.append(\"propid\", id)\n        const result = await axios.post('/api/image-upload', formData, { headers: {'Content-Type': 'multipart/form-data'}})\n        setImage('/img/prop/'+result.data.filename)\n      }\n    \n\n    return (\n        \n        <>\n          <div className=\"container my-1\">\n            <h2>PropertyDetail: {id}</h2>\n            <div>\n              <h2></h2>\n            </div>\n\n           { Auth.loggedIn() ? (\n\n            <form onSubmit={submitImg} method=\"post\" accept=\"image/jpeg\">\n                <input type=\"hidden\" name=\"propid\" value={id}/>\n                <input\n                filename={file} \n                onChange={e => setFile(e.target.files[0])} \n                type=\"file\" \n                accept=\"image/*\"\n                ></input>\n               \n                <button type=\"submit\">Submit</button>\n            </form>\n            ) : (\n              <div>\n                Other!\n                </div>\n            )\n            }\n        { image && <img src={image} />}\n          </div>\n        </>\n    )\n}\n\nexport default PropertyDetail;","import React, { useState, useEffect, useRef } from 'react';\nimport { Link, redirect, useNavigate } from 'react-router-dom';\nimport Auth from '../utils/auth';\nimport { useQuery, useMutation } from '@apollo/client';\nimport { QUERY_USER } from '../utils/queries';\nimport { ADD_PROPERTY} from '../utils/mutations';\n\nlet autoComplete;\nconst loadScript = (url, callback) => {\n    let script = document.createElement(\"script\");\n    script.type = \"text/javascript\";\n  \n    if (script.readyState) {\n      script.onreadystatechange = function() {\n        if (script.readyState === \"loaded\" || script.readyState === \"complete\") {\n          script.onreadystatechange = null;\n          callback();\n        }\n      };\n    } else {\n      script.onload = () => callback();\n    }\n  \n    script.src = url;\n    document.getElementsByTagName(\"head\")[0].appendChild(script);\n  };\n\n\n  function handleScriptLoad(updateQuery, autoCompleteRef) {\n    autoComplete = new window.google.maps.places.Autocomplete(\n      autoCompleteRef.current,\n      { types:[\"address\"],\n      componentRestrictions:{'country':['US']},\n      fields:['address_components', 'geometry'] }\n    );\n    autoComplete.setFields([\"address_components\", \"formatted_address\"]);\n    autoComplete.addListener(\"place_changed\", () =>\n      handlePlaceSelect(updateQuery)\n    );\n  }\n\n  async function handlePlaceSelect(updateQuery) {\n    const addressObject = autoComplete.getPlace();\n    const query = addressObject.formatted_address;\n    updateQuery(query);\n    //console.log(addressObject);\n  }\n  \n\nfunction AddProperty(props){\n\n    const navigate = useNavigate();\n    const [addProperty, { error }] = useMutation(ADD_PROPERTY);\n\n    const [query, setQuery] = useState(\"\");\n    const autoCompleteRef = useRef(null);\n\n    const [formState, setFormState] = useState({ address: '', city: '', state: '', zip: '', value:'', description:'', imgURL: '' });\n    \n    useEffect(() => {\n        loadScript(\n          `https://maps.googleapis.com/maps/api/js?key=AIzaSyDyfKCmxQxrQqrFnDgMSmj6xxhLnIkbuh8&libraries=places`,\n          () => handleScriptLoad(setQuery, autoCompleteRef)\n        );\n      }, []);\n\n    \n    const { data } = useQuery(QUERY_USER);\n    let user;\n\n    if (data) {\n        user = data.user;\n    }\n\n    const handleChange = (event) => {\n        const { name, value } = event.target;\n        setFormState({\n          ...formState,\n          [name]: value,\n        });\n      };\n    \n    const handleFormSubmit = async (event) => {\n        event.preventDefault();\n        console.log(autoComplete.getPlace());\n        const place = autoComplete.getPlace();\n        let addr1 = \"\";\n        let city = \"\";\n        let st = \"\";\n        let zip = \"\";\n        for (const component of place.address_components ) {\n            const componentType = component.types[0];\n            switch (componentType) {\n              case \"street_number\": {\n                addr1 = `${component.long_name}`;\n                break;\n              }\n        \n              case \"route\": {\n                addr1 += \" \"+ component.short_name;\n                break;\n              }\n        \n              case \"postal_code\": {\n                zip = `${component.long_name}`;\n                break;\n              }\n            \n              case \"locality\": {\n                city = `${component.long_name}`;\n                break;\n    \n              }\n              case \"administrative_area_level_1\": {\n                st = `${component.short_name}`;\n                break;\n              }\n        \n            \n            }\n          }\n        console.log(addr1+city+st+zip);\n        try {\n           \n            const mutationResponse = await addProperty({\n              variables: { address: addr1, city: city, state: st, zip: zip  },\n            }); \n            console.log('mutationResponse:');\n            console.log(mutationResponse);\n            if (mutationResponse.data){\n                navigate(`/property/${mutationResponse.data.addProperty._id}`);\n            }\n            \n            \n          } catch (e) {\n            console.log(e);\n          }\n\n    }\n    const handleAddressChange = ()=>{\n\n    }\n\n    return (\n        Auth.loggedIn() ? (\n        <>\n        <div className=\"search-location-input\">\n      \n    </div>\n          <div className=\"container my-1\">\n           Add Property Form here\n           <form onSubmit={handleFormSubmit} method=\"submit\">\n           <label htmlFor=\"fullAddress\">Street Address:</label>\n           <input\n                ref={autoCompleteRef}\n                onChange={event => setQuery(event.target.value)}\n                placeholder=\"Enter a City\"\n                value={query}\n                id=\"fullAddress\"\n                size=\"80\"\n                \n            /><br/><br/>\n           \n          {/* <input\n                ref={autoCompleteRef}\n                onChange={event => setQuery(event.target.value)}\n                placeholder=\"Enter a City\"\n                value={query}\n            /><br/>\n        */}\n            <input\n              type=\"text\"\n              name=\"imgURL\"\n              placeholder=\"https://imghost.com/img.jpg\"\n            /><br/>\n            <input\n              type=\"text\"\n              name=\"description\"\n              placeholder=\"property description\"\n            /><br/>\n            <input\n             type=\"text\"\n             name=\"value\"\n             placeholder=\"$0?\"\n            /><br/>\n            <button type=\"submit\">submit!</button>\n           </form>\n          </div>\n        </> \n        ) : null )\n            \n}\n\nexport default AddProperty;","import React, { useState } from 'react';\nimport { Link } from 'react-router-dom';\nimport { useMutation } from '@apollo/client';\nimport Auth from '../utils/auth';\nimport { ADD_USER } from '../utils/mutations';\n\nfunction Register(props) {\n  const [formState, setFormState] = useState({ email: '', password: '' });\n  const [addUser] = useMutation(ADD_USER);\n\n  const handleFormSubmit = async (event) => {\n    event.preventDefault();\n    const mutationResponse = await addUser({\n      variables: {\n        email: formState.email,\n        password: formState.password,\n        name: formState.name,\n       \n      },\n    });\n    const token = mutationResponse.data.addUser.token;\n    Auth.login(token);\n  };\n\n  const handleChange = (event) => {\n    const { name, value } = event.target;\n    setFormState({\n      ...formState,\n      [name]: value,\n    });\n  };\n\n  return (\n    <div className=\"container my-1\">\n      <Link to=\"/login\">← Go to Login</Link>\n\n      <h2>Register</h2>\n      <form onSubmit={handleFormSubmit}>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"firstName\">Name:</label>\n          <input\n            placeholder=\"Full Name\"\n            name=\"name\"\n            type=\"name\"\n            id=\"name\"\n            onChange={handleChange}\n          />\n        </div>\n       \n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"email\">Email:</label>\n          <input\n            placeholder=\"youremail@test.com\"\n            name=\"email\"\n            type=\"email\"\n            id=\"email\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row space-between my-2\">\n          <label htmlFor=\"pwd\">Password:</label>\n          <input\n            placeholder=\"******\"\n            name=\"password\"\n            type=\"password\"\n            id=\"pwd\"\n            onChange={handleChange}\n          />\n        </div>\n        <div className=\"flex-row flex-end\">\n          <button type=\"submit\">Submit</button>\n        </div>\n      </form>\n    </div>\n  );\n}\n\nexport default Register;\n","import React from \"react\";\nimport Auth from \"../../utils/auth\";\nimport { Link } from \"react-router-dom\";\n\nfunction Nav() {\n\n  function showNavigation() {\n    if (Auth.loggedIn()) {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/profile\">\n              Profile\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/add-property\">\n              Add Property\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            {/* this is not using the Link component to logout or user and then refresh the application to the start */}\n            <a href=\"/\" onClick={() => Auth.logout()}>\n              Logout\n            </a>\n          </li>\n        </ul>\n      );\n    } else {\n      return (\n        <ul className=\"flex-row\">\n          <li className=\"mx-1\">\n            <Link to=\"/register\">\n              Register\n            </Link>\n          </li>\n          <li className=\"mx-1\">\n            <Link to=\"/login\">\n              Login\n            </Link>\n          </li>\n        </ul>\n      );\n    }\n  }\n\n  return (\n    <header className=\"flex-row px-1\">\n      <h1>\n        <Link to=\"/\">\n          Keystone\n        </Link>\n      </h1>\n\n      <nav>\n        {showNavigation()}\n      </nav>\n    </header>\n  );\n}\n\nexport default Nav;\n","import React from 'react';\nimport { BrowserRouter as Router, Routes, Route } from 'react-router-dom';\nimport {\n  ApolloClient,\n  InMemoryCache,\n  ApolloProvider,\n  createHttpLink,\n} from '@apollo/client';\nimport { setContext } from '@apollo/client/link/context';\n\n\n// set pages here\n\nimport Home from './pages/Home';\n\nimport NoMatch from './pages/NoMatch';\nimport Login from './pages/Login';\nimport Profile from './pages/Profile';\nimport PropertyDetail from './pages/PropertyDetail';\nimport AddProperty from './pages/AddProperty';\nimport Register from './pages/Register';\nimport Nav from './components/Nav';\nimport { StoreProvider } from './utils/GlobalState';\n\nconst httpLink = createHttpLink({\n  uri: '/graphql',\n});\n\nconst authLink = setContext((_, { headers }) => {\n  const token = localStorage.getItem('id_token');\n  return {\n    headers: {\n      ...headers,\n      authorization: token ? `Bearer ${token}` : '',\n    },\n  };\n});\n\nconst client = new ApolloClient({\n  link: authLink.concat(httpLink),\n  cache: new InMemoryCache(),\n});\n\nfunction App() {\n  return (\n    <ApolloProvider client={client}>\n      <Router>\n        <div>\n          <StoreProvider>\n            <Nav />\n            <Routes>\n              <Route \n                path=\"/\" \n                element={<Home />} \n              />\n              <Route \n                path=\"/login\" \n                element={<Login />} \n              />\n              <Route \n                path=\"/register\" \n                element={<Register />} \n              />\n               <Route \n                path=\"/profile\" \n                element={<Profile />} \n              />\n               <Route \n                path=\"/add-property\" \n                element={<AddProperty />} \n              />\n              {/*\n              <Route \n                path=\"/success\" \n                element={<Success />} \n              />\n              <Route \n                path=\"/orderHistory\" \n                element={<OrderHistory />} \n               /> \n              <Route \n                path=\"/products/:id\" \n                element={<Detail />} \n              />*/}\n             <Route \n                path=\"/property/:id\" \n                element={<PropertyDetail />} \n              />\n              <Route \n                path=\"*\" \n                element={<NoMatch />} \n              />\n            </Routes>\n          </StoreProvider>\n        </div>\n      </Router>\n    </ApolloProvider>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n  // [::1] is the IPv6 localhost address.\n  window.location.hostname === '[::1]' ||\n  // 127.0.0.0/8 are considered localhost for IPv4.\n  window.location.hostname.match(\n    /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n  )\n);\n\nexport function register(config) {\n  if (\n    process.env.NODE_ENV === 'production' &&\n    'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n            'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n"],"sourceRoot":""}